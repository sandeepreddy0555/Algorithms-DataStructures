package Arrays.Sudoku;

import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertTrue;

import Arrays.Sudoku.Sudoku;
import java.util.Arrays;
import java.util.HashSet;
import java.util.Set;
import org.junit.jupiter.api.Test;

public class TestSudoku {

  Sudoku sudoku;

  Set<Character> validCharacters = new HashSet<>(
      Arrays.asList('1', '2', '3', '4', '5', '6', '7', '8', '9', '.'));


  @Test
  public void validColumnsShouldReturnTrue() {
    char[][] grid = {{'.', '.', '.', '.', '.', '.', '5', '.', '.'},
        {'.', '.', '.', '.', '.', '.', '.', '.', '.'},
        {'.', '.', '.', '.', '.', '.', '.', '.', '.'},

        {'9', '3', '.', '.', '2', '.', '4', '.', '.'},
        {'1', '.', '7', '.', '.', '.', '3', '.', '.'},
        {'.', '.', '.', '.', '.', '.', '.', '.', '.'},

        {'.', '.', '.', '3', '4', '.', '.', '.', '.'},
        {'.', '.', '.', '.', '.', '1', '.', '.', '.'},
        {'.', '.', '.', '.', '.', '5', '2', '.', '.'}};

    sudoku = new Sudoku(grid, validCharacters);
    assertTrue(sudoku.isValidColumns());
  }


  @Test
  public void validColumnsShouldReturnFalse() {
    char[][] grid = {{'.', '.', '.', '.', '.', '.', '5', '.', '.'},
        {'.', '.', '.', '.', '.', '.', '.', '.', '.'},
        {'.', '.', '.', '.', '.', '.', '.', '.', '.'},

        {'9', '3', '.', '.', '2', '.', '4', '.', '.'},
        {'9', '.', '7', '.', '.', '.', '3', '.', '.'},
        {'.', '.', '.', '.', '.', '.', '.', '.', '.'},

        {'.', '.', '.', '3', '4', '.', '.', '.', '.'},
        {'.', '.', '.', '.', '.', '1', '.', '.', '.'},
        {'.', '.', '.', '.', '.', '5', '2', '.', '.'}};

    sudoku = new Sudoku(grid, validCharacters);
    assertFalse(sudoku.isValidColumns());
  }


  @Test
  public void validRowsShouldReturnTrue() {
    char[][] grid = {{'.', '.', '.', '.', '.', '.', '5', '.', '.'},
        {'.', '.', '.', '.', '.', '.', '.', '.', '.'},
        {'.', '.', '.', '.', '.', '.', '.', '.', '.'},

        {'9', '3', '.', '.', '2', '.', '4', '1', '.'},
        {'1', '.', '7', '.', '.', '.', '3', '.', '.'},
        {'.', '.', '.', '.', '.', '.', '.', '.', '.'},

        {'.', '.', '.', '3', '4', '.', '.', '.', '.'},
        {'.', '.', '.', '.', '.', '1', '.', '.', '.'},
        {'.', '.', '.', '.', '.', '5', '2', '.', '.'}};

    sudoku = new Sudoku(grid, validCharacters);
    assertTrue(sudoku.isValidRows());
  }

  @Test
  public void validRowsShouldReturnFalse() {
    char[][] grid = {{'.', '.', '.', '.', '.', '.', '5', '.', '.'},
        {'.', '.', '.', '.', '.', '.', '.', '.', '.'},
        {'.', '.', '.', '.', '.', '.', '.', '.', '.'},

        {'9', '3', '.', '.', '2', '.', '4', '4', '.'},
        {'1', '.', '7', '.', '.', '.', '3', '.', '.'},
        {'.', '.', '.', '.', '.', '.', '.', '.', '.'},

        {'.', '.', '.', '3', '4', '.', '.', '.', '.'},
        {'.', '.', '.', '.', '.', '1', '.', '.', '.'},
        {'.', '.', '.', '.', '.', '5', '2', '.', '.'}};

    sudoku = new Sudoku(grid, validCharacters);
    assertFalse(sudoku.isValidRows());
  }


  @Test
  public void validSubGridShouldReturnTrue() {
    char[][] grid = {{'.', '.', '.', '.', '.', '.', '5', '.', '.'},
        {'.', '.', '.', '.', '.', '.', '.', '.', '.'},
        {'.', '.', '.', '.', '.', '.', '.', '.', '.'},

        {'9', '3', '.', '.', '2', '.', '4', '5', '.'},
        {'1', '.', '7', '.', '.', '.', '3', '.', '.'},
        {'.', '.', '.', '.', '.', '.', '.', '.', '.'},

        {'.', '.', '.', '3', '4', '.', '.', '.', '.'},
        {'.', '.', '.', '.', '.', '1', '.', '.', '.'},
        {'.', '.', '.', '.', '.', '5', '2', '.', '.'}};

    sudoku = new Sudoku(grid, validCharacters);
    assertTrue(sudoku.isSubGridValid());
  }


  @Test
  public void validSubGridShouldReturnFalse() {
    char[][] grid = {{'.', '.', '.', '.', '.', '.', '5', '.', '.'},
        {'.', '.', '.', '.', '.', '.', '.', '.', '.'},
        {'.', '.', '.', '.', '.', '.', '.', '.', '.'},

        {'9', '3', '.', '.', '2', '.', '4', '5', '.'},
        {'1', '.', '7', '.', '.', '.', '.', '4', '.'},
        {'.', '.', '.', '.', '.', '.', '.', '.', '.'},

        {'.', '.', '.', '3', '4', '.', '.', '.', '.'},
        {'.', '.', '.', '.', '.', '1', '.', '.', '.'},
        {'.', '.', '.', '.', '.', '5', '2', '.', '.'}};

    sudoku = new Sudoku(grid, validCharacters);
    assertFalse(sudoku.isSubGridValid());
  }

  @Test
  public void validSudokuShouldReturnTrue() {
    char[][] grid = {{'.', '.', '.', '.', '.', '.', '5', '.', '.'},
        {'.', '.', '.', '.', '.', '.', '.', '.', '.'},
        {'.', '.', '.', '.', '.', '.', '.', '.', '.'},

        {'9', '3', '.', '.', '2', '.', '4', '5', '.'},
        {'1', '.', '7', '.', '.', '.', '.', '2', '.'},
        {'.', '.', '.', '.', '.', '.', '.', '.', '.'},

        {'.', '.', '.', '3', '4', '.', '.', '.', '.'},
        {'.', '.', '.', '.', '.', '1', '.', '.', '.'},
        {'.', '.', '.', '.', '.', '5', '2', '.', '.'}};

    sudoku = new Sudoku(grid, validCharacters);
    assertTrue(sudoku.isSudoku());
  }


  @Test
  public void validSudokuShouldReturnFalse() {
    char[][] grid = {{'.', '.', '.', '.', '.', '.', '5', '.', '.'},
        {'.', '.', '.', '.', '.', '.', '.', '.', '.'},
        {'.', '.', '.', '.', '.', '.', '.', '.', '.'},

        {'9', '3', '.', '.', '2', '.', '4', '5', '.'},
        {'1', '.', '7', '.', '.', '.', '.', '5', '.'},
        {'.', '.', '.', '.', '.', '.', '.', '.', '.'},

        {'.', '.', '.', '3', '4', '.', '.', '.', '.'},
        {'.', '.', '.', '.', '.', '1', '.', '.', '.'},
        {'.', '.', '.', '.', '.', '5', '2', '.', '.'}};

    sudoku = new Sudoku(grid, validCharacters);
    assertFalse(sudoku.isSudoku());
  }


}
